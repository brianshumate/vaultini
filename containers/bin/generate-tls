#!/usr/bin/env bash
# generate the TLS material for Vaultini
# This material (including the certificate authorities) regenerated annually

here="$(basename $PWD)"
root_token="root"

if [ $here != 'containers' ]
  then
     echo "Please execute $(basename $0) from the containers directory"
     exit 1
fi

# using dev mode
VAULT_ADDR=http://127.0.0.1:8200
VAULT_TOKEN=root

function check_deps() {
    printf "Check dependencies ..."
    local status="$(which yq > /dev/null 2>&1;printf $?)"
    if [ $status != '0' ]
      then
        echo 'NOT OK'
        echo "yq is not installed or available on PATH."
        exit 1
    echo "OK"
    fi
}

function check_vault() {
    printf "Check Vault ..."
    local status="$(vault status > /dev/null 2>&1;printf $?)"
    if [ $status != '0' ]
      then
        echo 'NOT OK'
        echo "Vault is not available or not unsealed. Check it and try again."
        exit 1
    echo "Vault status OK"
    fi
}

function vault_login() {
    printf "Vault login ..."
    if vault login -no-print ${root_token}
        then
            echo "OK"
        else
            echo "NOT OK"
        exit 1
    fi
}

function generate_root_ca() {
    printf "Generate Root CA for 1 year ..."
    vault secrets enable pki
    vault secrets tune -max-lease-ttl=87600h pki
    vault write -field=certificate pki/root/generate/internal \
        common_name="vaultini.lan" \
        issuer_name="root-2024" \
        ttl=87600h > root_2024_ca.crt
    vault write pki/roles/2024-servers \
        allow_any_name=true \
        allow_subdomains=true \
        allow_localhost=true
    vault write pki/config/urls \
        issuing_certificates="$VAULT_ADDR/v1/pki/ca" \
        crl_distribution_points="$VAULT_ADDR/v1/pki/crl"
    echo "OK"
}

function generate_intermediate_ca() {
    printf "Generate intermediate CA ..."
    vault secrets enable -path=pki_int pki
    vault secrets tune -max-lease-ttl=43800h pki_int
    vault write -format=json pki_int/intermediate/generate/internal \
        common_name="vaultini.lan Intermediate Authority" \
        issuer_name="vaultini-dot-lan-intermediate" \
        | jq -r '.data.csr' > pki_intermediate.csr
    vault write -format=json pki/root/sign-intermediate \
        issuer_ref="root-2024" \
        csr=@pki_intermediate.csr \
        format=pem_bundle ttl="43800h" \
        | jq -r '.data.certificate' > intermediate.cert.pem
    vault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem
    vault write pki_int/roles/vaultini-dot-lan \
        issuer_ref="$(vault read -field=default pki_int/config/issuers)" \
        allowed_domains="vaultini.lan" \
        allow_subdomains=true \
        allow_localhost=true \
        allow_any_name=true \
        max_ttl="8760h"
     echo "OK"
}

function generate_certs_and_keys() {
    echo "Generate certificates and keys ..."
    export tls_vault1=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="vaultini1.vaultini.lan" ip_sans="127.0.0.1,10.1.42.101" ttl="8760h" -format=yaml)
    export tls_vault2=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="vaultini2.vaultini.lan" ip_sans="127.0.0.1,10.1.42.102" ttl="8760h" -format=yaml)
    export tls_vault3=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="vaultini3.vaultini.lan" ip_sans="127.0.0.1,10.1.42.103" ttl="8760h" -format=yaml)
    export tls_vault4=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="vaultini4.vaultini.lan" ip_sans="127.0.0.1,10.1.42.104" ttl="8760h" -format=yaml)
    export tls_vault5=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="vaultini5.vaultini.lan" ip_sans="127.0.0.1,10.1.42.105" ttl="8760h" -format=yaml)
    export tls_loadbalancer=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="loadbalancer.vaultini.lan" ip_sans="127.0.0.1,10.1.42.10" ttl="8760h" -format=yaml)
    export tls_prometheus=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="prometheus.vaultini.lan" ip_sans="127.0.0.1,10.1.42.211" ttl="8760h" -format=yaml)
    export tls_grafana=$(vault write pki_int/issue/vaultini-dot-lan alt_names="localhost" common_name="grafana.vaultini.lan" ip_sans="127.0.0.1,10.1.42.212" ttl="8760h" -format=yaml)
}

function install_tls() {
    echo "$tls_vault1" | yq '.data.certificate' > ./vaultini1/certs/server-cert.pem
    echo "$tls_vault1" | yq '.data.private_key' > ./vaultini1/certs/server-key.pem
    echo "$tls_vault1" | yq '.data.ca_chain' | grep -v '\- |\-' > ./vaultini1/certs/vaultini-ca-chain.pem
    echo "$tls_vault1" | yq '.data.issuing_ca' > ./vaultini1/certs/vaultini-ca.pem

    echo "$tls_vault2" | yq '.data.certificate' > ./vaultini2/certs/server-cert.pem
    echo "$tls_vault2" | yq '.data.private_key' > ./vaultini2/certs/server-key.pem
    echo "$tls_vault2" | yq '.data.ca_chain' | grep -v '\- |\-' > ./vaultini2/certs/vaultini-ca-chain.pem
    echo "$tls_vault2" | yq '.data.issuing_ca' > ./vaultini2/certs/vaultini-ca.pem

    echo "$tls_vault3" | yq '.data.certificate' > ./vaultini3/certs/server-cert.pem
    echo "$tls_vault3" | yq '.data.private_key' > ./vaultini3/certs/server-key.pem
    echo "$tls_vault3" | yq '.data.ca_chain' | grep -v '\- |\-' > ./vaultini3/certs/vaultini-ca-chain.pem
    echo "$tls_vault3" | yq '.data.issuing_ca' > ./vaultini3/certs/vaultini-ca.pem

    echo "$tls_vault4" | yq '.data.certificate' > ./vaultini4/certs/server-cert.pem
    echo "$tls_vault4" | yq '.data.private_key' > ./vaultini4/certs/server-key.pem
    echo "$tls_vault4" | yq '.data.ca_chain' | grep -v '\- |\-' > ./vaultini4/certs/vaultini-ca-chain.pem
    echo "$tls_vault4" | yq '.data.issuing_ca' > ./vaultini4/certs/vaultini-ca.pem

    echo "$tls_vault5" | yq '.data.certificate' > ./vaultini5/certs/server-cert.pem
    echo "$tls_vault5" | yq '.data.private_key' > ./vaultini5/certs/server-key.pem
    echo "$tls_vault5" | yq '.data.ca_chain' | grep -v '\- |\-' > ./vaultini5/certs/vaultini-ca-chain.pem
    echo "$tls_vault5" | yq '.data.issuing_ca' > ./vaultini5/certs/vaultini-ca.pem

    echo "$tls_loadbalancer" | yq '.data.certificate' > ./caddy/conf/server-cert.pem
    echo "$tls_loadbalancer" | yq '.data.private_key' > ./caddy/conf/server-key.pem
    echo "$tls_loadbalancer" | yq '.data.ca_chain' | grep -v '\- |\-' > ./caddy/conf/vaultini-ca-chain.pem
    echo "$tls_loadbalancer" | yq '.data.issuing_ca' > ./caddy/conf/vaultini-ca.pem
}

function cleanup() {
    rm -f root_2024_ca.crt pki_intermediate.csr intermediate.cert.pem
}

function main() {
check_vault
vault_login
generate_root_ca
generate_intermediate_ca
generate_certs_and_keys
install_tls
cleanup
}

main
